{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This is a documentation of all OTCamera modules and configuration variables. OTCamera is part of the OpenTrafficCam project and is used to record videos of traffic over several hours or even days. On the left side you can see the main module record along with the config and status module, which contain variables used across the entire code. It is build completely automatically using: MkDocs and mkdocstrings and Material for MkDocs theme. To work on the docs run the following command to get a live updating server. python mkdocs serve The site will be publicly served as static site on GitHub pages. python -m mkdocs gh-deploy This command will build the current site and push it to the OTCamera repository (branch: gh-pages ).","title":"Home"},{"location":"#home","text":"This is a documentation of all OTCamera modules and configuration variables. OTCamera is part of the OpenTrafficCam project and is used to record videos of traffic over several hours or even days. On the left side you can see the main module record along with the config and status module, which contain variables used across the entire code. It is build completely automatically using: MkDocs and mkdocstrings and Material for MkDocs theme. To work on the docs run the following command to get a live updating server. python mkdocs serve The site will be publicly served as static site on GitHub pages. python -m mkdocs gh-deploy This command will build the current site and push it to the OTCamera repository (branch: gh-pages ).","title":"Home"},{"location":"OTCamera/reference/config/","text":"config.py OTCamera config variables. All the configuration of OTCamera is done here. AWB_MODE = 'greyworld' module-attribute Controls the auto white balancing mode. greyworld is a specific mode for NoIR modules. DEBUG_MODE_ON = True module-attribute Turn debug mode on to get additional log entries. DRC_STRENGTH = 'high' module-attribute Sets dynamic range compression to lighten dark areas and to darken light areas. END_HOUR = 22 module-attribute Hour of day when to end recording. EXPOSURE_MODE = 'nightpreview' module-attribute Controls the analog and digital gains. FPS = 20 module-attribute Frames per Second. 10-20 should be enough. H264_BITRATE = 600000 module-attribute Bitrate used in h264 encoder. H264_LEVEL = '4' module-attribute Level used in h264 encoder. H264_PROFILE = 'high' module-attribute Profile used in h264 encoder. H264_QUALITY = 30 module-attribute Quality used in h264 encoder. INTERVAL_LENGTH = 15 module-attribute Interval length in minutes before video splits. MIN_FREE_SPACE = 1 module-attribute free space in GB on sd card before old videos get deleted. NUM_INTERVALS = 0 module-attribute Number of full intervals to record (0=infinit). NUM_LOG_FILES_HTML = 2 module-attribute Number of log files to be displayed on the status website PREFIX = socket . gethostname () module-attribute prefix for videoname and annotation. PREVIEW_FORMAT = 'jpeg' module-attribute Filetype of the static preview image. PREVIEW_INTERVAL = 5 module-attribute Interval between two preview images in seconds. RESOLUTION = ( 1640 , 1232 ) module-attribute Resolution of the camera module works internally. Field of view could be smaller with other values. RESOLUTION_SAVED_VIDEO_FILE = ( 800 , 600 ) module-attribute Resolution of the saved Videofile, not the camera itself. ROTATION = 180 module-attribute Rotate the whole camera image. START_HOUR = 6 module-attribute Hour of day when to start recording. USE_BUTTONS = False module-attribute True if hardware buttons are connected. USE_LED = False module-attribute True if Status-LEDs are connected. USE_RELAY = False module-attribute Enable to start and stop sshrelay.service (need's to be configured) VIDEO_FORMAT = 'h264' module-attribute Encoding format. WIFI_DELAY = 900 module-attribute Delay in seconds before wifi turns off.","title":"config.py"},{"location":"OTCamera/reference/config/#configpy","text":"OTCamera config variables. All the configuration of OTCamera is done here.","title":"config.py"},{"location":"OTCamera/reference/config/#OTCamera.config.AWB_MODE","text":"Controls the auto white balancing mode. greyworld is a specific mode for NoIR modules.","title":"AWB_MODE"},{"location":"OTCamera/reference/config/#OTCamera.config.DEBUG_MODE_ON","text":"Turn debug mode on to get additional log entries.","title":"DEBUG_MODE_ON"},{"location":"OTCamera/reference/config/#OTCamera.config.DRC_STRENGTH","text":"Sets dynamic range compression to lighten dark areas and to darken light areas.","title":"DRC_STRENGTH"},{"location":"OTCamera/reference/config/#OTCamera.config.END_HOUR","text":"Hour of day when to end recording.","title":"END_HOUR"},{"location":"OTCamera/reference/config/#OTCamera.config.EXPOSURE_MODE","text":"Controls the analog and digital gains.","title":"EXPOSURE_MODE"},{"location":"OTCamera/reference/config/#OTCamera.config.FPS","text":"Frames per Second. 10-20 should be enough.","title":"FPS"},{"location":"OTCamera/reference/config/#OTCamera.config.H264_BITRATE","text":"Bitrate used in h264 encoder.","title":"H264_BITRATE"},{"location":"OTCamera/reference/config/#OTCamera.config.H264_LEVEL","text":"Level used in h264 encoder.","title":"H264_LEVEL"},{"location":"OTCamera/reference/config/#OTCamera.config.H264_PROFILE","text":"Profile used in h264 encoder.","title":"H264_PROFILE"},{"location":"OTCamera/reference/config/#OTCamera.config.H264_QUALITY","text":"Quality used in h264 encoder.","title":"H264_QUALITY"},{"location":"OTCamera/reference/config/#OTCamera.config.INTERVAL_LENGTH","text":"Interval length in minutes before video splits.","title":"INTERVAL_LENGTH"},{"location":"OTCamera/reference/config/#OTCamera.config.MIN_FREE_SPACE","text":"free space in GB on sd card before old videos get deleted.","title":"MIN_FREE_SPACE"},{"location":"OTCamera/reference/config/#OTCamera.config.NUM_INTERVALS","text":"Number of full intervals to record (0=infinit).","title":"NUM_INTERVALS"},{"location":"OTCamera/reference/config/#OTCamera.config.NUM_LOG_FILES_HTML","text":"Number of log files to be displayed on the status website","title":"NUM_LOG_FILES_HTML"},{"location":"OTCamera/reference/config/#OTCamera.config.PREFIX","text":"prefix for videoname and annotation.","title":"PREFIX"},{"location":"OTCamera/reference/config/#OTCamera.config.PREVIEW_FORMAT","text":"Filetype of the static preview image.","title":"PREVIEW_FORMAT"},{"location":"OTCamera/reference/config/#OTCamera.config.PREVIEW_INTERVAL","text":"Interval between two preview images in seconds.","title":"PREVIEW_INTERVAL"},{"location":"OTCamera/reference/config/#OTCamera.config.RESOLUTION","text":"Resolution of the camera module works internally. Field of view could be smaller with other values.","title":"RESOLUTION"},{"location":"OTCamera/reference/config/#OTCamera.config.RESOLUTION_SAVED_VIDEO_FILE","text":"Resolution of the saved Videofile, not the camera itself.","title":"RESOLUTION_SAVED_VIDEO_FILE"},{"location":"OTCamera/reference/config/#OTCamera.config.ROTATION","text":"Rotate the whole camera image.","title":"ROTATION"},{"location":"OTCamera/reference/config/#OTCamera.config.START_HOUR","text":"Hour of day when to start recording.","title":"START_HOUR"},{"location":"OTCamera/reference/config/#OTCamera.config.USE_BUTTONS","text":"True if hardware buttons are connected.","title":"USE_BUTTONS"},{"location":"OTCamera/reference/config/#OTCamera.config.USE_LED","text":"True if Status-LEDs are connected.","title":"USE_LED"},{"location":"OTCamera/reference/config/#OTCamera.config.USE_RELAY","text":"Enable to start and stop sshrelay.service (need's to be configured)","title":"USE_RELAY"},{"location":"OTCamera/reference/config/#OTCamera.config.VIDEO_FORMAT","text":"Encoding format.","title":"VIDEO_FORMAT"},{"location":"OTCamera/reference/config/#OTCamera.config.WIFI_DELAY","text":"Delay in seconds before wifi turns off.","title":"WIFI_DELAY"},{"location":"OTCamera/reference/html_updater/","text":"html_updater.py CONFIG_DESC = { ConfigHtmlId . DEBUG_MODE_ON : 'Debug Mode On' , ConfigHtmlId . START_HOUR : 'Start Hour' , ConfigHtmlId . END_HOUR : 'End Hour' , ConfigHtmlId . INTERVAL_VIDEO_SPLIT : 'Interval Length[min] Before Video Splits' , ConfigHtmlId . NUM_INTERVALS : 'Number of Full Intervals to Record' , ConfigHtmlId . PREVIEW_INTERVAL : 'Preview Interval' , ConfigHtmlId . MIN_FREE_SPACE : 'Minimum Free Space' , ConfigHtmlId . PREFIX : 'Prefix' , ConfigHtmlId . VIDEO_DIR : 'Video Directory' , ConfigHtmlId . PREVIEW_PATH : 'Preview Image Path' , ConfigHtmlId . TEMPLATE_HTML_PATH : 'Template HTML Path' , ConfigHtmlId . INDEX_HTML_PATH : 'Index HTML Path' , ConfigHtmlId . FPS : 'FPS' , ConfigHtmlId . RESOLUTION : 'Resolution' , ConfigHtmlId . EXPOSURE_MODE : 'Exposure Mode' , ConfigHtmlId . DRC_STRENGTH : 'DRC Strength' , ConfigHtmlId . ROTATION : 'Rotation' , ConfigHtmlId . AWB_MODE : 'AWB Mode' , ConfigHtmlId . VIDEO_FORMAT : 'Video Format' , ConfigHtmlId . PREVIEW_FORMAT : 'Preview Format' , ConfigHtmlId . RESOLUTION_SAVED_VIDEO_FILE : 'Resolution of Saved Video File' , ConfigHtmlId . H264_PROFILE : 'H264 Profile' , ConfigHtmlId . H264_LEVEL : 'H264 Level' , ConfigHtmlId . H264_BITRATE : 'H264 Bitrate' , ConfigHtmlId . H264_QUALITY : 'H264 Quality' , ConfigHtmlId . USE_LED : 'Use LED' , ConfigHtmlId . USE_BUTTONS : 'Use Buttons' , ConfigHtmlId . WIFI_DELAY : 'Wi-Fi Delay' } module-attribute Dict that contains the descriptions of values to be displayed on the status website. The dictionary keys are of type ConfigHtmlId which itself is an Enum representin HTML id on the status website. The keys values are their respective descriptions belonging to the HTML ids. Returns: Name Type Description dict ConfigHtmlId , str the mapping in form of a dictionary. STATUS_DESC : dict [ StatusHtmlId , str ] = { StatusHtmlId . FREE_DISKSPACE : 'Free Disk Space' , StatusHtmlId . NUM_VIDEOS_RECORDED : 'Videos recorded' , StatusHtmlId . CURRENTLY_RECORDING : 'Camera Currently Recording' , StatusHtmlId . LOW_BATTERY : 'Battery Low' , StatusHtmlId . HOUR_BUTTON_ACTIVE : '24/7 Recording' } module-attribute Dict that contains the descriptions of values to be displayed on the status website. The dictionary keys are of type StatusHtmlId which itself is an Enum representing HTML id on the status website. The keys values are their respective descriptions belonging to the HTML ids. Returns: Name Type Description dict StatusHmtlId , str the mapping in form of a dictionary. ConfigDataObject dataclass Bases: OTCameraDataObject Configuration information to be displayed on the status website This class inherits from OTCameraDataObject and its properties need to be a tuple of type Tuple[ConfigHtmlId, Any] where ConfigHtmlId is an Enum . StatusHtmlId represents the unique HTML id to be found in the HTML document. Thus the value of an Enum member refers to an HTML id of a HTML tag. ConfigHtmlId Bases: Enum Enum representing config settings as HTML id on the status website. An enum member's values represent the actual HTML IDs used in the status website. LogDataObject dataclass Bases: OTCameraDataObject Log information to be displayed on the status website This class inherits from OTCameraDataObject and its properties need to be a tuple of type Tuple[LogHtmlId, Any] where LogHtmlId is an Enum . StatusHtmlId represents the unique HTML id to be found in the HTML document. Thus the value of an Enum member refers to an HTML id of a HTML tag. LogHtmlId Bases: Enum Enum representing log variables as HTML id on the status website. An enum member's values represent the actual HTML IDs used in the status website. OTCameraDataObject dataclass Bases: ABC Abstract data class representing information to be displayed on the status website. All properties that inherit from OTCameraDataObject need to be a tuple of type Tuple[Enum, Any]. The Enum represents the unique HTML id to be found in the HTML document. Thus the value of the Enum refers to an HTML id of a HTML tag. get_properties () Returns all properties of this class as a list of tuples. Returns: Type Description list [ Tuple [ Enum , Any ]] list[Tuple[Enum, Any]]: The properties of the concrete class. StatusDataObject dataclass Bases: OTCameraDataObject Status information to be displayed on the status website. This class inherits from OTCameraDataObject and its properties need to be a tuple of type Tuple[StatusHtmlId, Any] where StatusHtmnlId is an Enum . StatusHtmlId represents the unique HTML id to be found in the HTML document. Thus the value of an Enum member refers to an HTML id of a HTML tag. StatusHtmlId Bases: Enum Enum representing status settings as HTML id on the status website. An enum member's values represent the actual HTML IDs used in the status website. StatusWebsiteUpdater ( html_path , offline_html_path , html_save_path , status_info_id = 'status-info' , config_info_id = 'config-info' , log_info_id = 'log-info' , status_table_id = 'status-info-table' , config_table_id = 'config-info-table' , debug_mode_on = False ) This class provides methods to change the contents of the status website's HTML. Attributes: Name Type Description html_path Union [ str , Path ] Path to the status website's HTML file. offline_html_path Union [ str , Path ] Path to the HTML file to be displayed html_save_path Union [ str , Path ] Path to save the updated HTML file. status_info_id str The HTML id's tag corresponding to the config_info_id str The HTML id's tag corresponding to the log_info_id str The HTML id's tag corresponding to the status status_table_id str The HTML id's tag corresponding to the config_table_id str The HTML id's tag corresponding to the debug_mode_on bool True if debug mode is enabled. Defaults to disable_info () Disables status website information making them invisible. display_offline_info ( log_info ) Displays offline content in the HTML. Parameters: Name Type Description Default log_info LogDataObject The log data to be displayed in the HTML file. required update_info ( status_info , config_info ) Updates the information on the status website. The config settings are only displayed when debug_mode_on = True . Parameters: Name Type Description Default status_info OTCameraDataObject The status information to be upated. required config_info OTCameraDataObject The config settings to be updated. required","title":"html_updater.py"},{"location":"OTCamera/reference/html_updater/#html_updaterpy","text":"","title":"html_updater.py"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.CONFIG_DESC","text":"Dict that contains the descriptions of values to be displayed on the status website. The dictionary keys are of type ConfigHtmlId which itself is an Enum representin HTML id on the status website. The keys values are their respective descriptions belonging to the HTML ids. Returns: Name Type Description dict ConfigHtmlId , str the mapping in form of a dictionary.","title":"CONFIG_DESC"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.STATUS_DESC","text":"Dict that contains the descriptions of values to be displayed on the status website. The dictionary keys are of type StatusHtmlId which itself is an Enum representing HTML id on the status website. The keys values are their respective descriptions belonging to the HTML ids. Returns: Name Type Description dict StatusHmtlId , str the mapping in form of a dictionary.","title":"STATUS_DESC"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.ConfigDataObject","text":"Bases: OTCameraDataObject Configuration information to be displayed on the status website This class inherits from OTCameraDataObject and its properties need to be a tuple of type Tuple[ConfigHtmlId, Any] where ConfigHtmlId is an Enum . StatusHtmlId represents the unique HTML id to be found in the HTML document. Thus the value of an Enum member refers to an HTML id of a HTML tag.","title":"ConfigDataObject"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.ConfigHtmlId","text":"Bases: Enum Enum representing config settings as HTML id on the status website. An enum member's values represent the actual HTML IDs used in the status website.","title":"ConfigHtmlId"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.LogDataObject","text":"Bases: OTCameraDataObject Log information to be displayed on the status website This class inherits from OTCameraDataObject and its properties need to be a tuple of type Tuple[LogHtmlId, Any] where LogHtmlId is an Enum . StatusHtmlId represents the unique HTML id to be found in the HTML document. Thus the value of an Enum member refers to an HTML id of a HTML tag.","title":"LogDataObject"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.LogHtmlId","text":"Bases: Enum Enum representing log variables as HTML id on the status website. An enum member's values represent the actual HTML IDs used in the status website.","title":"LogHtmlId"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.OTCameraDataObject","text":"Bases: ABC Abstract data class representing information to be displayed on the status website. All properties that inherit from OTCameraDataObject need to be a tuple of type Tuple[Enum, Any]. The Enum represents the unique HTML id to be found in the HTML document. Thus the value of the Enum refers to an HTML id of a HTML tag.","title":"OTCameraDataObject"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.OTCameraDataObject.get_properties","text":"Returns all properties of this class as a list of tuples. Returns: Type Description list [ Tuple [ Enum , Any ]] list[Tuple[Enum, Any]]: The properties of the concrete class.","title":"get_properties()"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.StatusDataObject","text":"Bases: OTCameraDataObject Status information to be displayed on the status website. This class inherits from OTCameraDataObject and its properties need to be a tuple of type Tuple[StatusHtmlId, Any] where StatusHtmnlId is an Enum . StatusHtmlId represents the unique HTML id to be found in the HTML document. Thus the value of an Enum member refers to an HTML id of a HTML tag.","title":"StatusDataObject"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.StatusHtmlId","text":"Bases: Enum Enum representing status settings as HTML id on the status website. An enum member's values represent the actual HTML IDs used in the status website.","title":"StatusHtmlId"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.StatusWebsiteUpdater","text":"This class provides methods to change the contents of the status website's HTML. Attributes: Name Type Description html_path Union [ str , Path ] Path to the status website's HTML file. offline_html_path Union [ str , Path ] Path to the HTML file to be displayed html_save_path Union [ str , Path ] Path to save the updated HTML file. status_info_id str The HTML id's tag corresponding to the config_info_id str The HTML id's tag corresponding to the log_info_id str The HTML id's tag corresponding to the status status_table_id str The HTML id's tag corresponding to the config_table_id str The HTML id's tag corresponding to the debug_mode_on bool True if debug mode is enabled. Defaults to","title":"StatusWebsiteUpdater"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.StatusWebsiteUpdater.disable_info","text":"Disables status website information making them invisible.","title":"disable_info()"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.StatusWebsiteUpdater.display_offline_info","text":"Displays offline content in the HTML. Parameters: Name Type Description Default log_info LogDataObject The log data to be displayed in the HTML file. required","title":"display_offline_info()"},{"location":"OTCamera/reference/html_updater/#OTCamera.html_updater.StatusWebsiteUpdater.update_info","text":"Updates the information on the status website. The config settings are only displayed when debug_mode_on = True . Parameters: Name Type Description Default status_info OTCameraDataObject The status information to be upated. required config_info OTCameraDataObject The config settings to be updated. required","title":"update_info()"},{"location":"OTCamera/reference/record/","text":"record.py OTCamera main module to record videos. This module can be used to record either some intervals or continuously. It is configured by config.py. OTCamera ( camera , html_updater , capture_preview_immediately = False , video_dir = config . VIDEO_DIR , log_dir = config . VIDEO_DIR , num_log_files_html = config . NUM_LOG_FILES_HTML ) The OTCamera class provides functionality to record videos using Raspberry Pi's camera module. Constructor to initialise the OTCamera class. Parameters: Name Type Description Default camera Camera The Camera class to control the Raspberry Pi camera. required html_updater StatusWebsiteUpdater The class providing functionality to required capture_preview_immediately bool Whether to capture preview False video_dir Union [ str , Path ] Path to the save directory of the config.VIDEO_DIR log_dir Union [ str , Path ] Path to the save directory of the log config.VIDEO_DIR num_log_files_html int The number of logfiles to be displayed config.NUM_LOG_FILES_HTML record () Run init and record loop. Initializes the LEDs and Wifi AP. While it is recording time (see status.py), starts recording videos, splits them every interval (see config.py), captures a new preview image and stops recording after recording time ends. Stops everything by keyboard interrupt (Ctrl+C). main () Start running OTCamera.","title":"record.py"},{"location":"OTCamera/reference/record/#recordpy","text":"OTCamera main module to record videos. This module can be used to record either some intervals or continuously. It is configured by config.py.","title":"record.py"},{"location":"OTCamera/reference/record/#OTCamera.record.OTCamera","text":"The OTCamera class provides functionality to record videos using Raspberry Pi's camera module. Constructor to initialise the OTCamera class. Parameters: Name Type Description Default camera Camera The Camera class to control the Raspberry Pi camera. required html_updater StatusWebsiteUpdater The class providing functionality to required capture_preview_immediately bool Whether to capture preview False video_dir Union [ str , Path ] Path to the save directory of the config.VIDEO_DIR log_dir Union [ str , Path ] Path to the save directory of the log config.VIDEO_DIR num_log_files_html int The number of logfiles to be displayed config.NUM_LOG_FILES_HTML","title":"OTCamera"},{"location":"OTCamera/reference/record/#OTCamera.record.OTCamera.record","text":"Run init and record loop. Initializes the LEDs and Wifi AP. While it is recording time (see status.py), starts recording videos, splits them every interval (see config.py), captures a new preview image and stops recording after recording time ends. Stops everything by keyboard interrupt (Ctrl+C).","title":"record()"},{"location":"OTCamera/reference/record/#OTCamera.record.main","text":"Start running OTCamera.","title":"main()"},{"location":"OTCamera/reference/status/","text":"status.py OTCamera Status variables and functions. Contains all status variables and functions to be used across multiple modules. get_status_data () Returns OTCamera's status information. record_time () Checks if the current hour is an hour to record. Returns True if the hour of the current time is either after configured start hour and before end hour or hardware button is switched to continuous record. Returns: Name Type Description bool bool Time to record or not.","title":"status.py"},{"location":"OTCamera/reference/status/#statuspy","text":"OTCamera Status variables and functions. Contains all status variables and functions to be used across multiple modules.","title":"status.py"},{"location":"OTCamera/reference/status/#OTCamera.status.get_status_data","text":"Returns OTCamera's status information.","title":"get_status_data()"},{"location":"OTCamera/reference/status/#OTCamera.status.record_time","text":"Checks if the current hour is an hour to record. Returns True if the hour of the current time is either after configured start hour and before end hour or hardware button is switched to continuous record. Returns: Name Type Description bool bool Time to record or not.","title":"record_time()"},{"location":"OTCamera/reference/hardware/buttons/","text":"button.py OTCamera helper to interact with hardware buttons. Initializes hardware buttons using gpiozero if configured in config.py. Defines all button callback functions. Also includes the basic logic behind button interactions. init_wifi_button () Helper to initialize Wi-Fi status on boot according to wifi_button At boot time Wi-Fi will always be started by rc.local . If wifi_button is not switched on during boot, Wi-Fi will be immediately turned off. on_hour_button_switched () Sets status.hour_button_pressed if hour.button is pressed or released. Used to determine if user want's to record 24/7 or time based. on_low_battery_button_held () Shuts down Raspberry Pi if internal battery level is low. Adafruit's PowerBoost 1000C has two inputs: USB and LiPo-cell. If LiPo-cell voltage is below threshold, the 1000C Low Voltage PIN is pulled up. The 1000C PIN is connected to GPIO 18 through OTCamera pcb. Aditionally sets status.battery_is_low to True . on_power_button_released () Shuts down Raspberry Pi after 5 seconds delay if main switch is switched off. If power_button is released the power led will blink for 5 seconds. If it's still released the Pi will shutdown. If power_button is pressed within the 5 seconds the shutdown will be canceled. on_wifi_button_held () If wifi_button is pressed for a certain time Wi-Fi will be turned on. The threshold to distinguish between \"pressed\" and \"hold\" is set during initialization ( hold_time=2 ). on_wifi_button_pressed () If wifi_button is pressed status.wifi_button_pressed will be set True . This callback function won't do anything else. See _on_wifi_button_held . on_wifi_button_released () If wifi_button is released Wi-Fi will be turned off after a delay. After releasing wifi_button the Wi-Fi LED will blink until a delay is over. The delay is configured in config.py ( config.WIFI_DELAY ). If wifi_button is pressed again within the delay Wi-Fi LED will blink slowly to indicate Wi-Fi is still on. If wifi_button is released for whole delay Wi-Fi will be turned off.","title":"button.py"},{"location":"OTCamera/reference/hardware/buttons/#buttonpy","text":"OTCamera helper to interact with hardware buttons. Initializes hardware buttons using gpiozero if configured in config.py. Defines all button callback functions. Also includes the basic logic behind button interactions.","title":"button.py"},{"location":"OTCamera/reference/hardware/buttons/#OTCamera.hardware.button.init_wifi_button","text":"Helper to initialize Wi-Fi status on boot according to wifi_button At boot time Wi-Fi will always be started by rc.local . If wifi_button is not switched on during boot, Wi-Fi will be immediately turned off.","title":"init_wifi_button()"},{"location":"OTCamera/reference/hardware/buttons/#OTCamera.hardware.button.on_hour_button_switched","text":"Sets status.hour_button_pressed if hour.button is pressed or released. Used to determine if user want's to record 24/7 or time based.","title":"on_hour_button_switched()"},{"location":"OTCamera/reference/hardware/buttons/#OTCamera.hardware.button.on_low_battery_button_held","text":"Shuts down Raspberry Pi if internal battery level is low. Adafruit's PowerBoost 1000C has two inputs: USB and LiPo-cell. If LiPo-cell voltage is below threshold, the 1000C Low Voltage PIN is pulled up. The 1000C PIN is connected to GPIO 18 through OTCamera pcb. Aditionally sets status.battery_is_low to True .","title":"on_low_battery_button_held()"},{"location":"OTCamera/reference/hardware/buttons/#OTCamera.hardware.button.on_power_button_released","text":"Shuts down Raspberry Pi after 5 seconds delay if main switch is switched off. If power_button is released the power led will blink for 5 seconds. If it's still released the Pi will shutdown. If power_button is pressed within the 5 seconds the shutdown will be canceled.","title":"on_power_button_released()"},{"location":"OTCamera/reference/hardware/buttons/#OTCamera.hardware.button.on_wifi_button_held","text":"If wifi_button is pressed for a certain time Wi-Fi will be turned on. The threshold to distinguish between \"pressed\" and \"hold\" is set during initialization ( hold_time=2 ).","title":"on_wifi_button_held()"},{"location":"OTCamera/reference/hardware/buttons/#OTCamera.hardware.button.on_wifi_button_pressed","text":"If wifi_button is pressed status.wifi_button_pressed will be set True . This callback function won't do anything else. See _on_wifi_button_held .","title":"on_wifi_button_pressed()"},{"location":"OTCamera/reference/hardware/buttons/#OTCamera.hardware.button.on_wifi_button_released","text":"If wifi_button is released Wi-Fi will be turned off after a delay. After releasing wifi_button the Wi-Fi LED will blink until a delay is over. The delay is configured in config.py ( config.WIFI_DELAY ). If wifi_button is pressed again within the delay Wi-Fi LED will blink slowly to indicate Wi-Fi is still on. If wifi_button is released for whole delay Wi-Fi will be turned off.","title":"on_wifi_button_released()"},{"location":"OTCamera/reference/hardware/camera/","text":"camera.py OTCamera helper to handle picamera interaction. Used to start, split and stop recording. Camera Bases: Singleton restart () Restarts the PiCamera instance by closing it and re-initialising it. The initialisation is being done with the current set of parameters. split_if_interval_ends () Splits the videofile if the configured intervals ends. An Interval is configured in config.py. If the current minute matches the interval length, the video file is split and a new file begins. Counts the full intervals already recorded. If the maximum number of intervals, configured in config.py is reached, recording stops by breaking the loop in record.py. start_recording () Start a recording a video. If picam isn't already recording: - Deletes old files, until enough free space is available. - Starts a new recording on picam, using the config.py. - Waits 2 seconds and caputres a preview image. - Turns on the record LED (if attached). stop_recording () Stops the video recording. If the picamera is recording, the recording is stopped. Additionally, the record LED ist switched of (if configured).","title":"camera.py"},{"location":"OTCamera/reference/hardware/camera/#camerapy","text":"OTCamera helper to handle picamera interaction. Used to start, split and stop recording.","title":"camera.py"},{"location":"OTCamera/reference/hardware/camera/#OTCamera.hardware.camera.Camera","text":"Bases: Singleton","title":"Camera"},{"location":"OTCamera/reference/hardware/camera/#OTCamera.hardware.camera.Camera.restart","text":"Restarts the PiCamera instance by closing it and re-initialising it. The initialisation is being done with the current set of parameters.","title":"restart()"},{"location":"OTCamera/reference/hardware/camera/#OTCamera.hardware.camera.Camera.split_if_interval_ends","text":"Splits the videofile if the configured intervals ends. An Interval is configured in config.py. If the current minute matches the interval length, the video file is split and a new file begins. Counts the full intervals already recorded. If the maximum number of intervals, configured in config.py is reached, recording stops by breaking the loop in record.py.","title":"split_if_interval_ends()"},{"location":"OTCamera/reference/hardware/camera/#OTCamera.hardware.camera.Camera.start_recording","text":"Start a recording a video. If picam isn't already recording: - Deletes old files, until enough free space is available. - Starts a new recording on picam, using the config.py. - Waits 2 seconds and caputres a preview image. - Turns on the record LED (if attached).","title":"start_recording()"},{"location":"OTCamera/reference/hardware/camera/#OTCamera.hardware.camera.Camera.stop_recording","text":"Stops the video recording. If the picamera is recording, the recording is stopped. Additionally, the record LED ist switched of (if configured).","title":"stop_recording()"},{"location":"OTCamera/reference/hardware/led/","text":"led.py OTCamera LED interaction helper. If LEDs are configured in config.py this modules handels all the interaction (on, off, blinking) of the LEDs. off () Turn all LEDs off. power_blink () Blink power LED once. power_on () Turn power LED on. power_pre_off () Rapidly blink power LED. rec_off () Pulse record LED 4 times and switch it off. rec_on () Blink record LED infinite. wifi_off () Pulse Wi-Fi LED 4 times and switch it off. wifi_on () Blink Wi-Fi LED infinite. wifi_pre_off () Rapidly blink Wi-Fi LED.","title":"led.py"},{"location":"OTCamera/reference/hardware/led/#ledpy","text":"OTCamera LED interaction helper. If LEDs are configured in config.py this modules handels all the interaction (on, off, blinking) of the LEDs.","title":"led.py"},{"location":"OTCamera/reference/hardware/led/#OTCamera.hardware.led.off","text":"Turn all LEDs off.","title":"off()"},{"location":"OTCamera/reference/hardware/led/#OTCamera.hardware.led.power_blink","text":"Blink power LED once.","title":"power_blink()"},{"location":"OTCamera/reference/hardware/led/#OTCamera.hardware.led.power_on","text":"Turn power LED on.","title":"power_on()"},{"location":"OTCamera/reference/hardware/led/#OTCamera.hardware.led.power_pre_off","text":"Rapidly blink power LED.","title":"power_pre_off()"},{"location":"OTCamera/reference/hardware/led/#OTCamera.hardware.led.rec_off","text":"Pulse record LED 4 times and switch it off.","title":"rec_off()"},{"location":"OTCamera/reference/hardware/led/#OTCamera.hardware.led.rec_on","text":"Blink record LED infinite.","title":"rec_on()"},{"location":"OTCamera/reference/hardware/led/#OTCamera.hardware.led.wifi_off","text":"Pulse Wi-Fi LED 4 times and switch it off.","title":"wifi_off()"},{"location":"OTCamera/reference/hardware/led/#OTCamera.hardware.led.wifi_on","text":"Blink Wi-Fi LED infinite.","title":"wifi_on()"},{"location":"OTCamera/reference/hardware/led/#OTCamera.hardware.led.wifi_pre_off","text":"Rapidly blink Wi-Fi LED.","title":"wifi_pre_off()"},{"location":"OTCamera/reference/helpers/filesystem/","text":"filesystem.py OTCamera helper fo filesystem stuff. Check if enough filespace is available and delete old files until it's enough. delete_old_files ( video_dir = config . VIDEO_DIR , min_free_space = config . MIN_FREE_SPACE ) Delete old files until enough space available. Checks if enough space ( config.MINFREESPACE ) is a availabe to save video files. If not, deletes the oldest files in video_dir one after another until enough space is available on disk. Parameters: Name Type Description Default video_dir Union [ str , Path ] Path to video directory. config.VIDEO_DIR min_free_space(int, optional free space in GB on sd card before old videos required Raises: Type Description NoMoreFilesToDeleteError If no more files in video_dir can be deleted to","title":"filesystem.py"},{"location":"OTCamera/reference/helpers/filesystem/#filesystempy","text":"OTCamera helper fo filesystem stuff. Check if enough filespace is available and delete old files until it's enough.","title":"filesystem.py"},{"location":"OTCamera/reference/helpers/filesystem/#OTCamera.helpers.filesystem.delete_old_files","text":"Delete old files until enough space available. Checks if enough space ( config.MINFREESPACE ) is a availabe to save video files. If not, deletes the oldest files in video_dir one after another until enough space is available on disk. Parameters: Name Type Description Default video_dir Union [ str , Path ] Path to video directory. config.VIDEO_DIR min_free_space(int, optional free space in GB on sd card before old videos required Raises: Type Description NoMoreFilesToDeleteError If no more files in video_dir can be deleted to","title":"delete_old_files()"},{"location":"OTCamera/reference/helpers/log/","text":"log.py OTCamera helper for logging. Open a logfile, based on the name.log and write a message to it. Also prints all messages. Use log.write(msg) to write any message, log.breakline() to write a single line of # or log.otc() to log and print a OpenTrafficCam logo. breakline ( reboot = True ) Write a breakline. Write a breakline containing several # to the logfile. Parameters: Name Type Description Default reboot bool Perform reboot if logging fails. Defaults to True. True closefile () Flush and close the logfile. otc () Generate a ASCII logo and write it to the logfile. write ( msg , level = LogLevel . INFO , reboot = True ) Write any message to logfile. Takes a message, adds date and time and writes it to a logfile (name.log). Parameters: Name Type Description Default msg str Message to be written. required level str either \"debug\", \"info\", \"warning\", \"error\", \"exception\" LogLevel.INFO reboot bool Perform reboot if logging fails. Defaults to True. True","title":"log.py"},{"location":"OTCamera/reference/helpers/log/#logpy","text":"OTCamera helper for logging. Open a logfile, based on the name.log and write a message to it. Also prints all messages. Use log.write(msg) to write any message, log.breakline() to write a single line of # or log.otc() to log and print a OpenTrafficCam logo.","title":"log.py"},{"location":"OTCamera/reference/helpers/log/#OTCamera.helpers.log.breakline","text":"Write a breakline. Write a breakline containing several # to the logfile. Parameters: Name Type Description Default reboot bool Perform reboot if logging fails. Defaults to True. True","title":"breakline()"},{"location":"OTCamera/reference/helpers/log/#OTCamera.helpers.log.closefile","text":"Flush and close the logfile.","title":"closefile()"},{"location":"OTCamera/reference/helpers/log/#OTCamera.helpers.log.otc","text":"Generate a ASCII logo and write it to the logfile.","title":"otc()"},{"location":"OTCamera/reference/helpers/log/#OTCamera.helpers.log.write","text":"Write any message to logfile. Takes a message, adds date and time and writes it to a logfile (name.log). Parameters: Name Type Description Default msg str Message to be written. required level str either \"debug\", \"info\", \"warning\", \"error\", \"exception\" LogLevel.INFO reboot bool Perform reboot if logging fails. Defaults to True. True","title":"write()"},{"location":"OTCamera/reference/helpers/name/","text":"name.py OTCamera helpers for (file)names. Generates strings for use in different modules. For example the logfilename or videofilename or the string to annotate the video. annotate () String to annotate video. Text to be added as annotation to video footage. Contains a Prefix and current datetime. Returns: Name Type Description str str annotation text log () Filename of logfile. Path incl. filename where logfile is saved. Returns: Name Type Description Path Path filename for log preview () Filename for preview image. Path incl. filename where preview file is saved. Returns: Name Type Description str str filename for preview video () Filename of Video. Path incl. filename where videos are saved to, based on hostname and current date and time. Returns: Name Type Description str str filename for video","title":"name.py"},{"location":"OTCamera/reference/helpers/name/#namepy","text":"OTCamera helpers for (file)names. Generates strings for use in different modules. For example the logfilename or videofilename or the string to annotate the video.","title":"name.py"},{"location":"OTCamera/reference/helpers/name/#OTCamera.helpers.name.annotate","text":"String to annotate video. Text to be added as annotation to video footage. Contains a Prefix and current datetime. Returns: Name Type Description str str annotation text","title":"annotate()"},{"location":"OTCamera/reference/helpers/name/#OTCamera.helpers.name.log","text":"Filename of logfile. Path incl. filename where logfile is saved. Returns: Name Type Description Path Path filename for log","title":"log()"},{"location":"OTCamera/reference/helpers/name/#OTCamera.helpers.name.preview","text":"Filename for preview image. Path incl. filename where preview file is saved. Returns: Name Type Description str str filename for preview","title":"preview()"},{"location":"OTCamera/reference/helpers/name/#OTCamera.helpers.name.video","text":"Filename of Video. Path incl. filename where videos are saved to, based on hostname and current date and time. Returns: Name Type Description str str filename for video","title":"video()"},{"location":"OTCamera/reference/helpers/rpi/","text":"rpi.py OTCamera helpers to control the RPi interfaces. Contains all functions to control the Raspberry Pi itself. reboot () Reboot the Raspberry Pi. Reboots the Raspberry Pi if any exception is raised. Tries to close the camera object and writes to logfile. shutdown () Shutdown the Raspberry Pi. Shuts down the Raspberry Pi if the power button is still pressed after blink ends (2 seconds). Tries to stop and close the camera object. Writes messages to the logfile. wifi_switch_off () Turn off Wi-Fi wifi_switch_on () Turn on Wi-Fi","title":"rpi.py"},{"location":"OTCamera/reference/helpers/rpi/#rpipy","text":"OTCamera helpers to control the RPi interfaces. Contains all functions to control the Raspberry Pi itself.","title":"rpi.py"},{"location":"OTCamera/reference/helpers/rpi/#OTCamera.helpers.rpi.reboot","text":"Reboot the Raspberry Pi. Reboots the Raspberry Pi if any exception is raised. Tries to close the camera object and writes to logfile.","title":"reboot()"},{"location":"OTCamera/reference/helpers/rpi/#OTCamera.helpers.rpi.shutdown","text":"Shutdown the Raspberry Pi. Shuts down the Raspberry Pi if the power button is still pressed after blink ends (2 seconds). Tries to stop and close the camera object. Writes messages to the logfile.","title":"shutdown()"},{"location":"OTCamera/reference/helpers/rpi/#OTCamera.helpers.rpi.wifi_switch_off","text":"Turn off Wi-Fi","title":"wifi_switch_off()"},{"location":"OTCamera/reference/helpers/rpi/#OTCamera.helpers.rpi.wifi_switch_on","text":"Turn on Wi-Fi","title":"wifi_switch_on()"}]}